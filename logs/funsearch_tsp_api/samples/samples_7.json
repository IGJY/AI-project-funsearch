{"sample_order": 7, "function": "def priority(current_city: int, distances: np.ndarray, unvisited: set[int]) -> np.ndarray:\n    \"\"\"\u5b9a\u4e49\u542f\u53d1\u5f0f\u7b56\u7565\uff0c\u4e3a TSP \u9009\u62e9\u4e0b\u4e00\u5ea7\u57ce\u5e02\"\"\"\n    priorities = np.array([1 / distances[current_city, city] if distances[current_city, city] > 0 else float('inf') for city in unvisited])\n    \n    min_distance = np.min(distances[current_city, list(unvisited)])\n    max_distance = np.max(distances[current_city, list(unvisited)])\n    \n    if min_distance == max_distance:\n        priorities = np.full_like(priorities, 1)\n    else:\n        priorities = (priorities - min_distance) / (max_distance - min_distance)\n        \n    for i, city in enumerate(unvisited):\n        if city % 2 == 0:\n            priorities[i] *= 1.5\n        else:\n            priorities[i] *= 0.5\n            \n    return priorities\n\n", "score": -Infinity}