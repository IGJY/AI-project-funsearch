{"sample_order": 3, "function": "def priority(current_city: int, distances: np.ndarray, unvisited: set[int]) -> np.ndarray:\n    cities = np.array(list(unvisited), dtype=np.int64)\n    priorities = np.zeros(len(cities), dtype=np.float64)\n\n    for i in range(len(cities)):\n        city = cities[i]\n        dist = distances[current_city, city]\n        \n        # Inverse of the distance: closer cities should have higher priority\n        dist_priority = 1.0 / (dist + 1e-6)  # Adding a small constant to avoid division by zero\n\n        # The city's connectivity: sum of all distances from this city to others\n        connectivity = np.sum(distances[city])  # More connected cities should have lower priority\n        \n        # Combine these factors with a weighted average\n        priorities[i] = dist_priority * (1.0 / (1.0 + connectivity))\n\n    return priorities\n\n", "score": -3272.7558623549135}